#!/usr/bin/python3

import json
import time
import socket
import pathlib
import argparse
import colorama
import requests
import urllib.parse

from typing import Callable


def connectivity_check(
        success: Callable[[], None] | None = None,
        error: Callable[[], None] | None = None,
        timeout: int = 1,
):
    try:
        requests.head('https://www.baidu.com/', timeout=timeout)
        if success is not None:
            success()
    except (requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):
        if error is not None:
            error()


def get_addr() -> str:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("202.113.18.106", 80))
    addr = s.getsockname()[0]
    s.close()
    return addr


def login(args: argparse.Namespace):
    print('Logging in...')
    if bool(args.username) != bool(args.password):
        raise ValueError('Username and password must be both specified or both omitted.')
    if args.config is not None:
        config_path = pathlib.Path(args.config)
    else:
        config_path = pathlib.Path.home() / '.config' / 'nknet' / 'config.json'
    if args.username is None:
        if not config_path.exists():
            raise FileNotFoundError(f'Config file not found: {config_path}. '
                                    f'If this is the first time you use this program, '
                                    f'please specify your username and password using `--username` and `--password`. '
                                    f'Otherwise, please specify the path to a valid config file using `--config`. '
                                    f'For more information, please run `nknet login --help`.')
        config = json.loads(config_path.read_text())
        args.username = config['username']
        args.password = config['password']
    requests.get(
        f'http://202.113.18.106:801/eportal/?c=ACSetting&a=Login&DDDDD={urllib.parse.quote(args.username)}'
        f'&upass={urllib.parse.quote(args.password)}',
        verify=False,
    )
    time.sleep(3)
    connectivity_check(success=lambda: print('Login successful'), error=lambda: print('Login failed'))
    if not args.no_save:
        config_path.parent.mkdir(parents=True, exist_ok=True)
        config_path.write_text(json.dumps({'username': args.username, 'password': args.password}))


def logout(_):
    print('Logging out...')
    requests.get(
        f'http://202.113.18.106:801/eportal/?c=ACSetting&a=Logout',
        verify=False,
    )
    time.sleep(3)
    connectivity_check(success=lambda: print('Logout failed'), error=lambda: print('Logout successful'))


def status(args: argparse.Namespace):
    def on_success():
        print(f'Status: {colorama.Fore.LIGHTGREEN_EX}online{colorama.Fore.RESET}')
        if args.address is None:
            args.address = get_addr()
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadAccount&ip={urllib.parse.quote(args.address)}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        response = json.loads(response.text[1:-1])
        if response['list'] is None:
            print(f'Invalid address: {args.address}')
            return
        username = response['list'][0]['account']
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadUserFlow&account={urllib.parse.quote(username)}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        try:
            name = json.loads(response.text[1:-1])['list'][0]['name']
        except json.decoder.JSONDecodeError:
            print(f'Invalid address: {args.address}')
            return
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadOnlineDevice'
            f'&account={urllib.parse.quote(username)}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        devices = json.loads(response.text[1:-1])['list']
        login_time = 'N/A'
        for device in devices:
            if device['login_ip'] == args.address:
                login_time = device['login_time']
                break
        print(f'Login account: {username}')
        print(f'Name: {name}')
        print(f'Login time: {login_time}')

    def on_error():
        print(f'Status: {colorama.Fore.LIGHTRED_EX}offline{colorama.Fore.RESET}')

    connectivity_check(success=on_success, error=on_error)


if __name__ == '__main__':
    colorama.init()
    parser = argparse.ArgumentParser(description='a script to login/logout to/from the campus network')
    parser.set_defaults(func=lambda _: parser.print_help())
    parser.add_argument('-v', '--version', action='version', version='1.2.2')
    subparsers = parser.add_subparsers(dest='command')

    login_parser = subparsers.add_parser('login', help='login to the campus network')
    login_parser.add_argument('-u', '--username', required=False, type=str,
                              help='username of your campus network account')
    login_parser.add_argument('-p', '--password', required=False, type=str,
                              help='password of your campus network account')
    login_parser.add_argument('-c', '--config', required=False, type=str,
                              help='path to the config file')
    login_parser.add_argument('-n', '--no-save', required=False, action='store_true',
                              help='do not save the username and password to the config file')
    login_parser.set_defaults(func=login)

    logout_parser = subparsers.add_parser('logout', help='logout from the campus network')
    logout_parser.set_defaults(func=logout)

    status_parser = subparsers.add_parser('status', help='check the status of the campus network')
    status_parser.add_argument(
        '-a', '--address',
        required=False,
        type=str,
        help='IP address of the device that should only be specified when the automatic address detection fails',
    )
    status_parser.set_defaults(func=status)

    args = parser.parse_args()
    args.func(args)
