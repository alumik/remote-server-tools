#!/usr/bin/env python3

import json
import time
import socket
import argparse
import colorama
import requests

from typing import *


def connectivity_check(success: Optional[Callable] = None, error: Optional[Callable] = None, timeout: int = 1):
    try:
        requests.head('https://www.baidu.com/', timeout=timeout)
        if success is not None:
            success()
    except requests.exceptions.ReadTimeout:
        if error is not None:
            error()


def get_addr(args: argparse.Namespace) -> str:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("202.113.18.106", 80))
    addr = s.getsockname()[0]
    s.close()
    args.address = addr
    return addr


def login(args: argparse.Namespace):
    print('Logging in...')
    requests.get(
        f'http://202.113.18.106:801/eportal/?c=ACSetting&a=Login&DDDDD={args.user}&upass={args.password}',
        verify=False,
    )
    time.sleep(3)
    connectivity_check(success=lambda: print('Login successful'), error=lambda: print('Login failed'))


def logout(_):
    print('Logging out...')
    requests.get(
        f'http://202.113.18.106:801/eportal/?c=ACSetting&a=Logout',
        verify=False,
    )
    time.sleep(3)
    connectivity_check(success=lambda: print('Logout failed'), error=lambda: print('Logout successful'))


def status(args: argparse.Namespace):
    def on_success():
        print(f'Status: {colorama.Fore.LIGHTGREEN_EX}online{colorama.Fore.RESET}')
        if args.address is None:
            args.address = get_addr(args)
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadAccount&ip={args.address}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        response = json.loads(response.text[1:-1])
        if response['list'] is None:
            print(f'Invalid address: {args.address}')
            return
        username = response['list'][0]['account']
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadUserFlow&account={username}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        try:
            name = json.loads(response.text[1:-1])['list'][0]['name']
        except json.decoder.JSONDecodeError:
            print(f'Invalid address: {args.address}')
            return
        response = requests.get(
            f'http://202.113.18.106:801/eportal/?c=GetUserMsg&a=loadOnlineDevice&account={username}',
            verify=False,
        )
        response.encoding = response.apparent_encoding
        devices = json.loads(response.text[1:-1])['list']
        login_time = 'N/A'
        for device in devices:
            if device['login_ip'] == args.address:
                login_time = device['login_time']
                break
        print(f'Login account: {username}')
        print(f'Name: {name}')
        print(f'Login time: {login_time}')

    def on_error():
        print(f'Status: {colorama.Fore.LIGHTRED_EX}offline{colorama.Fore.RESET}')

    connectivity_check(success=on_success, error=on_error)


if __name__ == '__main__':
    colorama.init()
    parser = argparse.ArgumentParser(description='a script to login/logout to/from the campus network')
    parser.set_defaults(func=lambda _: parser.print_help())
    subparsers = parser.add_subparsers(dest='command')

    login_parser = subparsers.add_parser('login', help='login to the campus network')
    login_parser.add_argument('-u', '--user', required=True, type=str, help='username of your campus network account')
    login_parser.add_argument('-p', '--password', required=True, type=str,
                              help='password of your campus network account')
    login_parser.set_defaults(func=login)

    logout_parser = subparsers.add_parser('logout', help='logout from the campus network')
    logout_parser.set_defaults(func=logout)

    status_parser = subparsers.add_parser('status', help='check the status of the campus network')
    status_parser.add_argument(
        '-a', '--address',
        required=False,
        type=str,
        help='IP address of the device that should only be specified when the automatic address detection fails',
    )
    status_parser.set_defaults(func=status)

    args = parser.parse_args()
    args.func(args)
